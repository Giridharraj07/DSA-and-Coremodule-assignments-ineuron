# Assignment Questions 7

<aside>
ðŸ’¡ **Question 1**

Given two strings s and t, *determine if they are isomorphic*.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

**Example 1:**

**Input:** s = "egg", t = "add"

**Output:** true

</aside>

<aside>
ðŸ’¡ **Question 2**

Given a string num which represents an integer, return true *if* num *is a **strobogrammatic number***.

A **strobogrammatic number** is a number that looks the same when rotated 180 degrees (looked at upside down).

**Example 1:**

**Input:** num = "69"

**Output:**

true

</aside>

<aside>
ðŸ’¡ **Question 3**

Given two non-negative integers, num1 and num2 represented as string, return *the sum of* num1 *and* num2 *as a string*.

You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.

**Example 1:**

**Input:** num1 = "11", num2 = "123"

**Output:**

"134"

</aside>

<aside>
ðŸ’¡ **Question 4**

Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

**Example 1:**

**Input:** s = "Let's take LeetCode contest"

**Output:** "s'teL ekat edoCteeL tsetnoc"

</aside>

<aside>
ðŸ’¡ **Question 5**

Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.

If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.

**Example 1:**

**Input:** s = "abcdefg", k = 2

**Output:**

"bacdfeg"

</aside>

<aside>
ðŸ’¡ **Question 6**

Given two strings s and goal, return true *if and only if* s *can become* goal *after some number of **shifts** on* s.

A **shift** on s consists of moving the leftmost character of s to the rightmost position.

- For example, if s = "abcde", then it will be "bcdea" after one shift.

**Example 1:**

**Input:** s = "abcde", goal = "cdeab"

**Output:**

true

</aside>

<aside>
ðŸ’¡ **Question 7**

Given two strings s and t, return true *if they are equal when both are typed into empty text editors*. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

**Example 1:**

**Input:** s = "ab#c", t = "ad#c"

**Output:** true

**Explanation:**

Both s and t become "ac".

</aside>

----Assignment 7 answers----
ðŸ’¡ Question 1

To determine if two strings are isomorphic, we need to check if the characters in the first string can be replaced to obtain the second string, while preserving the order of characters. We will create character mappings from each character in the first string to the corresponding character in the second string. If a character in the first string maps to multiple characters in the second string or if two different characters in the first string map to the same character in the second string, the strings are not isomorphic.

Here's the solution:


def isIsomorphic(s: str, t: str) -> bool:
    if len(s) != len(t):
        return False
    
    s_to_t = {}  # Mapping from s to t
    t_to_s = {}  # Mapping from t to s
    
    for i in range(len(s)):
        if s[i] in s_to_t:
            if s_to_t[s[i]] != t[i]:
                return False
        else:
            s_to_t[s[i]] = t[i]
        
        if t[i] in t_to_s:
            if t_to_s[t[i]] != s[i]:
                return False
        else:
            t_to_s[t[i]] = s[i]
    
    return True
Example usage:


s = "egg"
t = "add"
print(isIsomorphic(s, t))  # Output: True
ðŸ’¡ Question 2

To determine if a number is strobogrammatic, we need to check if the number remains the same when rotated 180 degrees. We can create a mapping of each digit to its strobogrammatic counterpart and compare the corresponding digits from the start and end of the number.

Here's the solution:


def isStrobogrammatic(num: str) -> bool:
    strobogrammatic_map = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}
    rotated_num = ''
    
    for digit in num:
        if digit not in strobogrammatic_map:
            return False
        rotated_num = strobogrammatic_map[digit] + rotated_num
    
    return rotated_num == num
Example usage:


num = "69"
print(isStrobogrammatic(num))  # Output: True
ðŸ’¡ Question 3

To find the sum of two non-negative integers represented as strings, we can perform digit-wise addition starting from the least significant digit and carry over any resulting carry. We build the result string by appending the calculated digit to the left of the existing result string.

Here's the solution:
def addStrings(num1: str, num2: str) -> str:
    result = ''
    carry = 0
    i, j = len(num1) - 1, len(num2) - 1
    
    while i >= 0 or j >= 0 or carry:
        if i >= 0:
            carry += int(num1[i])
            i -= 1
        if j >= 0:
            carry += int(num2[j])
            j -= 1
        
        digit = carry % 10
        carry = carry // 10
        result = str(digit) + result
    
    return result
Example usage:


num1 = "11"
num2 = "123"
print(addStrings(num1, num2))  # Output: "134"
ðŸ’¡ Question 4

To reverse the order of characters in each word within a sentence while preserving whitespace and initial word order, we can split the sentence into words, reverse each word, and then join them back together.

Here's the solution:


def reverseWords(s: str) -> str:
    words = s.split()
    reversed_words = [word[::-1] for word in words]
    return ' '.join(reversed_words)
Example usage:
s = "Let's take LeetCode contest"
print(reverseWords(s))  # Output: "s'teL ekat edoCteeL tsetnoc"
ðŸ’¡ Question 5

To reverse the first k characters for every 2k characters counting from the start of the string, we can iterate over the string with a step of 2k and reverse the first k characters in each iteration. We need to handle cases where there are fewer than k characters left.

Here's the solution:


def reverseStr(s: str, k: int) -> str:
    s = list(s)
    for i in range(0, len(s), 2 * k):
        s[i:i+k] = reversed(s[i:i+k])
    return ''.join(s)
Example usage:

s = "abcdefg"
k = 2
print(reverseStr(s, k))  # Output: "bacdfeg"
ðŸ’¡ Question 6

To determine if a string s can become a string goal after some number of shifts on s, we need to check if goal is a substring of s + s.

Here's the solution:


def rotateString(s: str, goal: str) -> bool:
    return len(s) == len(goal) and goal in (s + s)
Example usage:

s = "abcde"
goal = "cdeab"
print(rotateString(s, goal))  # Output: True
ðŸ’¡ Question 7

To determine if two strings s and t are equal when both are typed into empty text editors (considering the '#' as backspace character), we can use a stack to simulate the typing process. Iterate through each character of s and t, pushing non-backspace characters onto the stack and popping characters when encountering a backspace. Finally, compare the resulting strings after typing.

Here's the solution:
def backspaceCompare(s: str, t: str) -> bool:
    def processString(string: str) -> str:
        stack = []
        for char in string:
            if char != '#':
                stack.append(char)
            elif stack:
                stack.pop()
        return ''.join(stack)
    
    return processString(s) == processString(t)
Example usage:

s = "ab#c"
t = "ad#c"
print(backspaceCompare(s, t))  # Output: True
