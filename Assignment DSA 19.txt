# Assignment Questions 19

<aside>
ðŸ’¡ 1. **Merge k Sorted Lists**

You are given an array ofÂ `k`Â linked-listsÂ `lists`, each linked-list is sorted in ascending order.

*Merge all the linked-lists into one sorted linked-list and return it.*

**Example 1:**

```
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

```

**Example 2:**

```
Input: lists = []
Output: []

```

**Example 3:**

```
Input: lists = [[]]
Output: []

```

**Constraints:**

- `k == lists.length`
- `0 <= k <= 10000`
- `0 <= lists[i].length <= 500`
- `-10000 <= lists[i][j] <= 10000`
- `lists[i]`Â is sorted inÂ **ascending order**.
- The sum ofÂ `lists[i].length`Â will not exceedÂ `10000`.
</aside>

<aside>
ðŸ’¡ 2. **Count of Smaller Numbers After Self**

Given an integer arrayÂ `nums`, returnÂ *an integer array*Â `counts`Â *where*Â `counts[i]`Â *is the number of smaller elements to the right of*Â `nums[i]`.

**Example 1:**

```
Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are2 smaller elements (2 and 1).
To the right of 2 there is only1 smaller element (1).
To the right of 6 there is1 smaller element (1).
To the right of 1 there is0 smaller element.

```

**Example 2:**

```
Input: nums = [-1]
Output: [0]

```

**Example 3:**

```
Input: nums = [-1,-1]
Output: [0,0]

```

**Constraints:**

- `1 <= nums.length <= 100000`
- `-10000 <= nums[i] <= 10000`
</aside>

<aside>
ðŸ’¡ 3. **Sort an Array**

Given an array of integersÂ `nums`, sort the array in ascending order and return it.

You must solve the problemÂ **without using any built-in**Â functions inÂ `O(nlog(n))`Â time complexity and with the smallest space complexity possible.

**Example 1:**

```
Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).

```

**Example 2:**

```
Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.

```

**Constraints:**

- `1 <= nums.length <= 5 * 10000`
- `-5 * 104 <= nums[i] <= 5 * 10000`
</aside>

<aside>
ðŸ’¡ 4. **Move all zeroes to end of array**

Given an array of random numbers, Push all the zeroâ€™s of a given array to the end of the array. For example, if the given arrays is {1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0}, it should be changed to {1, 9, 8, 4, 2, 7, 6, 0, 0, 0, 0}. The order of all other elements should be same. Expected time complexity is O(n) and extra space is O(1).

**Example:**

```
Input :  arr[] = {1, 2, 0, 4, 3, 0, 5, 0};
Output : arr[] = {1, 2, 4, 3, 5, 0, 0, 0};

Input : arr[]  = {1, 2, 0, 0, 0, 3, 6};
Output : arr[] = {1, 2, 3, 6, 0, 0, 0};
```

</aside>

<aside>
ðŸ’¡ 5. **Rearrange array in alternating positive & negative items with O(1) extra space**

Given anÂ **array of positive**Â andÂ **negative numbers**, arrange them in anÂ **alternate**Â fashion such that every positive number is followed by a negative and vice-versa maintaining theÂ **order of appearance**.Â The number of positive and negative numbers need not be equal. If there are more positive numbers they appear at the end of the array. If there are more negative numbers, they too appear at the end of the array.

**Examples:**

> Input: Â arr[] = {1, 2, 3, -4, -1, 4}
Output: arr[] = {-4, 1, -1, 2, 3, 4}

Input: Â arr[] = {-5, -2, 5, 2, 4, 7, 1, 8, 0, -8}
Output: arr[] = {-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}
> 
</aside>

<aside>
ðŸ’¡ **6. Merge two sorted arrays**

Given two sorted arrays, the task is to merge them in a sorted manner.

**Examples:**

> Input: arr1[] = { 1, 3, 4, 5}, arr2[] = {2, 4, 6, 8}Â 
Output: arr3[] = {1, 2, 3, 4, 4, 5, 6, 8}

Input: arr1[] = { 5, 8, 9}, arr2[] = {4, 7, 8}
Output: arr3[] = {4, 5, 7, 8, 8, 9}
> 
</aside>

<aside>
ðŸ’¡ 7. **Intersection of Two Arrays**

Given two integer arraysÂ `nums1`Â andÂ `nums2`, returnÂ *an array of their intersection*. Each element in the result must beÂ **unique**Â and you may return the result inÂ **any order**.

**Example 1:**

```
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]

```

**Example 2:**

```
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.

```

**Constraints:**

- `1 <= nums1.length, nums2.length <= 1000`
- `0 <= nums1[i], nums2[i] <= 1000`
</aside>

<aside>
ðŸ’¡ 8. **Intersection of Two Arrays II**

Given two integer arraysÂ `nums1`Â andÂ `nums2`, returnÂ *an array of their intersection*. Each element in the result must appear as many times as it shows in both arrays and you may return the result inÂ **any order**.

**Example 1:**

```
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]

```

**Example 2:**

```
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.

```

**Constraints:**

- `1 <= nums1.length, nums2.length <= 1000`
- `0 <= nums1[i], nums2[i] <= 1000`
</aside>

----Assignment answers 19-----

ðŸ’¡ Question 1: Merge k Sorted Lists

To merge k sorted linked lists, we can use a min-heap to efficiently keep track of the minimum element among all the lists. We start by initializing an empty min-heap and pushing the head of each linked list into the heap. Then, we repeatedly extract the minimum element from the heap and append it to the result list. If the extracted element has a next node, we push the next node into the heap. We continue this process until the heap is empty.

Here's the solution:


import heapq

def mergeKLists(lists):
    # Initialize a min-heap
    min_heap = []

    # Push the heads of all linked lists into the heap
    for head in lists:
        if head:
            heapq.heappush(min_heap, (head.val, head))

    # Create a dummy node to build the result list
    dummy = ListNode(0)
    curr = dummy

    # Process the heap until it is empty
    while min_heap:
        # Extract the minimum element from the heap
        val, node = heapq.heappop(min_heap)

        # Append the minimum element to the result list
        curr.next = node
        curr = curr.next

        # Push the next node into the heap
        if node.next:
            heapq.heappush(min_heap, (node.next.val, node.next))

    return dummy.next
Note: This solution assumes that the input linked lists are represented using the ListNode class, where each node has a val attribute and a next attribute pointing to the next node in the list.

ðŸ’¡ Question 2: Count of Smaller Numbers After Self

To count the number of smaller elements to the right of each element in the array, we can use the merge sort algorithm with some modifications. The idea is to divide the array into two halves and recursively count the number of smaller elements in each half. Then, we merge the two halves while keeping track of the counts.

Here's the solution:

def countSmaller(nums):
    def mergeSort(arr):
        if len(arr) <= 1:
            return arr

        mid = len(arr) // 2
        left = mergeSort(arr[:mid])
        right = mergeSort(arr[mid:])
        return merge(left, right)

    def merge(left, right):
        merged = []
        count = 0
        i = j = 0

        while i < len(left) and j < len(right):
            if left[i][0] <= right[j][0]:
                merged.append(left[i])
                result[left[i][1]] += count
                i += 1
            else:
                merged.append(right[j])
                count += 1
                j += 1

        while i < len(left):
            merged.append(left[i])
            result[left[i][1]] += count
            i += 1

        while j < len(right):
            merged.append(right[j])
            j += 1

        return merged

    result = [0] * len(nums)
    nums = [(num, i) for i, num in enumerate(nums)]
    mergeSort(nums)
    return result
ðŸ’¡ Question 3: Sort an Array

To sort an array in ascending order without using any built-in functions and with O(nlog(n)) time complexity, we can use a divide-and-conquer sorting algorithm like merge sort or quicksort.

Here's an example implementation using the merge sort algorithm:


def sortArray(nums):
    def mergeSort(arr):
        if len(arr) <= 1:
            return arr

        mid = len(arr) // 2
        left = mergeSort(arr[:mid])
        right = mergeSort(arr[mid:])
        return merge(left, right)

    def merge(left, right):
        merged = []
        i = j = 0

        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                j += 1

        while i < len(left):
            merged.append(left[i])
            i += 1

        while j < len(right):
            merged.append(right[j])
            j += 1

        return merged

    return mergeSort(nums)
ðŸ’¡ Question 4: Move all zeroes to the end of the array

To move all zeroes to the end of the array while maintaining the order of other elements, we can use the two-pointer approach. We maintain two pointers, read and write, where read iterates through the array and write points to the next position to write a non-zero element.

Here's the solution:
def moveZeroes(nums):
    write = 0

    for read in range(len(nums)):
        if nums[read] != 0:
            nums[write] = nums[read]
            write += 1

    while write < len(nums):
        nums[write] = 0
        write += 1
ðŸ’¡ Question 5: Rearrange array in alternating positive & negative items with O(1) extra space

To rearrange an array in an alternating fashion such that every positive number is followed by a negative number and vice versa, we can use the two-pointer approach. We maintain two pointers, positive and negative, where positive looks for the next positive number and negative looks for the next negative number. If we find a positive number at an even index and a negative number at an odd index, we swap the two numbers.

Here's the solution:

def rearrangeArray(nums):
    positive = 0
    negative = 1
    n = len(nums)

    while positive < n and negative < n:
        if nums[positive] >= 0:
            positive += 2
        elif nums[negative] < 0:
            negative += 2
        else:
            nums[positive], nums[negative] = nums[negative], nums[positive]
            positive += 2
            negative += 2
ðŸ’¡ Question 6: Merge two sorted arrays

To merge two sorted arrays into a single sorted array, we can use the two-pointer approach. We maintain two pointers, i and j, which point to the current elements of the two arrays. We compare the elements at arr1[i] and arr2[j] and select the smaller element to add to the merged array. We increment the corresponding pointer and repeat the process until we reach the end of either array. Finally, we append the remaining elements of the non-empty array to the merged array.

Here's the solution:
def mergeSortedArrays(arr1, arr2):
    merged = []
    i = j = 0

    while i < len(arr1) and j < len(arr2):
        if arr1[i] <= arr2[j]:
            merged.append(arr1[i])
            i += 1
        else:
            merged.append(arr2[j])
            j += 1

    while i < len(arr1):
        merged.append(arr1[i])
        i += 1

    while j < len(arr2):
        merged.append(arr2[j])
        j += 1

    return merged
ðŸ’¡ Question 7: Intersection of Two Arrays

To find the intersection of two arrays, we can use a set to store the unique elements of one array, and then iterate through the second array to check if each element exists in the set. If an element is found, we add it to the result set. Finally, we convert the result set back to a list and return it.

Here's the solution:


def intersection(nums1, nums2):
    set1 = set(nums1)
    result = set()

    for num in nums2:
        if num in set1:
            result.add(num)

    return list(result)
ðŸ’¡ Question 8: Intersection of Two Arrays II

To find the intersection of two arrays, considering the frequency of elements, we can use a dictionary to store the frequency of elements in one array. Then, we iterate through the second array and for each element, if it exists in the dictionary and its frequency is greater than 0, we add it to the result list and decrement its frequency in the dictionary.

Here's the solution:


def intersection(nums1, nums2):
    freq = {}
    result = []

    # Count the frequency of elements in nums1
    for num in nums1:
        freq[num] = freq.get(num, 0) + 1

    # Check the frequency of elements in nums2
    for num in nums2:
        if num in freq and freq[num] > 0:
            result.append(num)
            freq[num] -= 1

    return result