<aside>
ðŸ’¡ **Q1.** Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

**Example:**
Input: nums = [2,7,11,15], target = 9
Output0 [0,1]

**Explanation:** Because nums[0] + nums[1] == 9, we return [0, 1][

</aside>

<aside>
ðŸ’¡ **Q2.** Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.

Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:

- Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
- Return k.

**Example :**
Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_*,_*]

**Explanation:** Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores)[

</aside>

<aside>
ðŸ’¡ **Q3.** Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

**Example 1:**
Input: nums = [1,3,5,6], target = 5

Output: 2

</aside>

<aside>
ðŸ’¡ **Q4.** You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

**Example 1:**
Input: digits = [1,2,3]
Output: [1,2,4]

**Explanation:** The array represents the integer 123.

Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

</aside>

<aside>
ðŸ’¡ **Q5.** You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

**Example 1:**
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]

**Explanation:** The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

</aside>

<aside>
ðŸ’¡ **Q6.** Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

**Example 1:**
Input: nums = [1,2,3,1]

Output: true

</aside>

<aside>
ðŸ’¡ **Q7.** Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the nonzero elements.

Note that you must do this in-place without making a copy of the array.

**Example 1:**
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

</aside>

<aside>
ðŸ’¡ **Q8.** You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array nums representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.

**Example 1:**
Input: nums = [1,2,2,4]
Output: [2,3]

</aside>

---Assignment Answers---
Q1: Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.


def twoSum(nums, target):
    num_dict = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in num_dict:
            return [num_dict[complement], i]
        num_dict[num] = i
    return []
Explanation:

We iterate through the list of numbers nums and for each number, we calculate the complement (the number needed to reach the target).
We check if the complement exists in our dictionary num_dict. If it does, we return the indices of the current number and the complement.
If the complement does not exist in num_dict, we add the current number to the dictionary with its index.
If no two numbers add up to the target, we return an empty list.
Example:


nums = [2, 7, 11, 15]
target = 9
print(twoSum(nums, target))
Output: [0, 1]

Q2: Given an integer array nums and an integer val, remove all occurrences of val in nums in-place and return the number of elements in nums which are not equal to val.

def removeElement(nums, val):
    k = 0
    for num in nums:
        if num != val:
            nums[k] = num
            k += 1
    return k
Explanation:

We maintain a variable k to keep track of the position where the next non-val element should be placed.
We iterate through each element in nums and check if it is equal to val.
If an element is not equal to val, we place it at position k in the array and increment k by 1.
Finally, we return k, which represents the number of elements in nums that are not equal to val.
Example:

nums = [3, 2, 2, 3]
val = 3
print(removeElement(nums, val))
print(nums)
Output:
2
[2, 2, _, _]

Note: In the output list, _ represents elements that are not important and can be ignored.

Q3: Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

def searchInsert(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return left
Explanation:

We perform a binary search to find the target value in the sorted array.
If the target is found, we return its index.
If the target is not found, the binary search will eventually narrow down the range to two adjacent indices (left and right), where the target would be inserted between them.
We return the left index as the insertion point of the target.
Example:


nums = [1, 3, 5, 6]
target = 5
print(searchInsert(nums, target))
Output: 2

Q4: You are given a large integer represented as an integer array digits. Increment the large integer by one and return the resulting array of digits.


def plusOne(digits):
    n = len(digits)
    for i in range(n - 1, -1, -1):
        if digits[i] < 9:
            digits[i] += 1
            return digits
        digits[i] = 0
    return [1] + [0] * n
Explanation:

We start iterating from the last digit to the first digit of the array.
If the current digit is less than 9, we increment it by 1 and return the digits array.
If the current digit is 9, we set it to 0 and continue iterating to the next digit.
If we have finished iterating through all the digits and haven't returned, it means that the original number consisted of all 9's. In this case, we append a 1 at the beginning of the digits array and fill the rest with 0's.
Example:

digits = [1, 2, 3]
print(plusOne(digits))
Output: [1, 2, 4]

Q5: Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as a single sorted array.


def merge(nums1, m, nums2, n):
    p1, p2, p = m - 1, n - 1, m + n - 1
    while p1 >= 0 and p2 >= 0:
        if nums1[p1] >= nums2[p2]:
            nums1[p] = nums1[p1]
            p1 -= 1
        else:
            nums1[p] = nums2[p2]
            p2 -= 1
        p -= 1
    while p2 >= 0:
        nums1[p] = nums2[p2]
        p2 -= 1
        p -= 1
Explanation:

We use three pointers: p1 to track the last non-zero element in nums1, p2 to track the last element in nums2, and p to track the current position in nums1 where we need to place the next element.
Starting from the end of the arrays, we compare elements from nums1 and nums2 and place the larger element at position p in nums1.
We decrement the corresponding pointers (p1, p2, and p) after each placement.
If there are remaining elements in nums2 after the first while loop, we copy them to the beginning of nums1.
Example:


nums1 = [1, 2, 3, 0, 0, 0]
m = 3
nums2 = [2, 5, 6]
n = 3
merge(nums1, m, nums2, n)
print(nums1)
Output: [1, 2, 2, 3, 5, 6]

Q6: Given an integer array nums, return true if any value appears at least twice in the array, and false if every element is distinct.

def containsDuplicate(nums):
    num_set = set()
    for num in nums:
        if num in num_set:
            return True
        num_set.add(num)
    return False
Explanation:

We iterate through the array nums and keep track of the numbers encountered so far using a set num_set.
If we encounter a number that is already in the set, it means there is a duplicate, and we return True.
If we reach the end of the loop without finding any duplicates, we return False.
Example:


nums = [1, 2, 3, 1]
print(containsDuplicate(nums))
Output: True

Q7: Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the nonzero elements.

def moveZeroes(nums):
    p = 0
    for i in range(len(nums)):
        if nums[i] != 0:
            nums[p], nums[i] = nums[i], nums[p]
            p += 1
Explanation:

We use a pointer p to keep track of the next position where a non-zero element should be placed.
We iterate through the array nums, and whenever we encounter a non-zero element, we swap it with the element at position p.
After each swap, we increment p to move it to the next available position for a non-zero element.
This process ensures that all non-zero elements are moved to the beginning of the array while maintaining their relative order. The remaining elements at the end of the array will be 0's.
Example:


nums = [0, 1, 0, 3, 12]
moveZeroes(nums)
print(nums)
Output: [1, 3, 12, 0, 0]

Q8: You have a set of integers s, which originally contains all the numbers from 1 to n. However, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number. Given the array nums representing the data status of this set after the error, find the number that occurs twice and the number that is missing, and return them in the form of an array.


def findErrorNums(nums):
    n = len(nums)
    num_set = set()
    duplicate = -1
    missing = -1
    for num in nums:
        if num in num_set:
            duplicate = num
        num_set.add(num)
    for i in range(1, n + 1):
        if i not in num_set:
            missing = i
            break
    return [duplicate, missing]
Explanation:

We use a set num_set to keep track of the numbers encountered in the array nums.
While iterating through nums, if we encounter a number that is already in num_set, it means that it is a duplicate.
Additionally, we iterate from 1 to n (the expected range of numbers in the set) and check for missing numbers by comparing with num_set.
We return the duplicate and missing numbers in the form of an array.
Example:

nums = [1, 2, 2, 4]
print(findErrorNums(nums))
Output: [2, 3]

