User
# Assignment Questions 17

<aside>
ðŸ’¡ **Question 1**

Given a string `s`, *find the first non-repeating character in it and return its index*. If it does not exist, return `-1`.

**Example 1:**

```
Input: s = "leetcode"
Output: 0

```

**Example 2:**

```
Input: s = "loveleetcode"
Output: 2

```

**Example 3:**

```
Input: s = "aabb"
Output: -1
```

</aside>

<aside>
ðŸ’¡ **Question 2**

Given a **circular integer array** `nums` of length `n`, return *the maximum possible sum of a non-empty **subarray** of* `nums`.

A **circular array** means the end of the array connects to the beginning of the array. Formally, the next element of `nums[i]` is `nums[(i + 1) % n]` and the previous element of `nums[i]` is `nums[(i - 1 + n) % n]`.

A **subarray** may only include each element of the fixed buffer `nums` at most once. Formally, for a subarray `nums[i], nums[i + 1], ..., nums[j]`, there does not exist `i <= k1`, `k2 <= j` with `k1 % n == k2 % n`.

**Example 1:**

```
Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.

```

**Example 2:**

```
Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.

```

**Example 3:**

```
Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.
```

</aside>

<aside>
ðŸ’¡ **Question 3**

The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a **stack**. At each step:

- If the student at the front of the queue **prefers** the sandwich on the top of the stack, they will **take it** and leave the queue.
- Otherwise, they will **leave it** and go to the queue's end.

This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `ith` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `jth` student in the initial queue (`j = 0` is the front of the queue). Return *the number of students that are unable to eat.*

**Example 1:**

```
Input: students = [1,1,0,0], sandwiches = [0,1,0,1]
Output: 0
Explanation:
- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].
- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].
- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].
- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].
- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].
Hence all students are able to eat.

```

**Example 2:**

```
Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]
Output: 3
```

</aside>

<aside>
ðŸ’¡ **Question 4**

You have a `RecentCounter` class which counts the number of recent requests within a certain time frame.

Implement the `RecentCounter` class:

- `RecentCounter()` Initializes the counter with zero recent requests.
- `int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.

It is **guaranteed** that every call to `ping` uses a strictly larger value of `t` than the previous call.

**Example 1:**

```
Input
["RecentCounter", "ping", "ping", "ping", "ping"]
[[], [1], [100], [3001], [3002]]
Output
[null, 1, 2, 3, 3]

Explanation
RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1
recentCounter.ping(100);   // requests = [1,100], range is [-2900,100], return 2
recentCounter.ping(3001);  // requests = [1,100,3001], range is [1,3001], return 3
recentCounter.ping(3002);  // requests = [1,100,3001,3002], range is [2,3002], return 3
```

</aside>

<aside>
ðŸ’¡ **Question 5**

There are `n` friends that are playing a game. The friends are sitting in a circle and are numbered from `1` to `n` in **clockwise order**. More formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend.

The rules of the game are as follows:

1. **Start** at the `1st` friend.
2. Count the next `k` friends in the clockwise direction **including** the friend you started at. The counting wraps around the circle and may count some friends more than once.
3. The last friend you counted leaves the circle and loses the game.
4. If there is still more than one friend in the circle, go back to step `2` **starting** from the friend **immediately clockwise** of the friend who just lost and repeat.
5. Else, the last friend in the circle wins the game.

Given the number of friends, `n`, and an integer `k`, return *the winner of the game*.

**Example 1:**

!https://assets.leetcode.com/uploads/2021/03/25/ic234-q2-ex11.png

```
Input: n = 5, k = 2
Output: 3
Explanation: Here are the steps of the game:
1) Start at friend 1.
2) Count 2 friends clockwise, which are friends 1 and 2.
3) Friend 2 leaves the circle. Next start is friend 3.
4) Count 2 friends clockwise, which are friends 3 and 4.
5) Friend 4 leaves the circle. Next start is friend 5.
6) Count 2 friends clockwise, which are friends 5 and 1.
7) Friend 1 leaves the circle. Next start is friend 3.
8) Count 2 friends clockwise, which are friends 3 and 5.
9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.
```

**Example 2:**

```
Input: n = 6, k = 5
Output: 1
Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.
```

</aside>

<aside>
ðŸ’¡ **Question 6**

You are given an integer array `deck`. There is a deck of cards where every card has a unique integer. The integer on the `ith` card is `deck[i]`.

You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.

You will do the following steps repeatedly until all cards are revealed:

1. Take the top card of the deck, reveal it, and take it out of the deck.
2. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.
3. If there are still unrevealed cards, go back to step 1. Otherwise, stop.

Return *an ordering of the deck that would reveal the cards in increasing order*.

**Note** that the first entry in the answer is considered to be the top of the deck.

**Example 1:**

```
Input: deck = [17,13,11,2,3,5,7]
Output: [2,13,3,11,5,17,7]
Explanation:
We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.
After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.
We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].
We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].
We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].
We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].
We reveal 11, and move 17 to the bottom.  The deck is now [13,17].
We reveal 13, and move 17 to the bottom.  The deck is now [17].
We reveal 17.
Since all the cards revealed are in increasing order, the answer is correct.

```

**Example 2:**

```
Input: deck = [1,1000]
Output: [1,1000]
```

</aside>

<aside>
ðŸ’¡ **Question 7**

Design a queue that supports `push` and `pop` operations in the front, middle, and back.

Implement the `FrontMiddleBack` class:

- `FrontMiddleBack()` Initializes the queue.
- `void pushFront(int val)` Adds `val` to the **front** of the queue.
- `void pushMiddle(int val)` Adds `val` to the **middle** of the queue.
- `void pushBack(int val)` Adds `val` to the **back** of the queue.
- `int popFront()` Removes the **front** element of the queue and returns it. If the queue is empty, return `1`.
- `int popMiddle()` Removes the **middle** element of the queue and returns it. If the queue is empty, return `1`.
- `int popBack()` Removes the **back** element of the queue and returns it. If the queue is empty, return `1`.

**Notice** that when there are **two** middle position choices, the operation is performed on the **frontmost** middle position choice. For example:

- Pushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`.
- Popping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.

**Example 1:**

```
Input:
["FrontMiddleBackQueue", "pushFront", "pushBack", "pushMiddle", "pushMiddle", "popFront", "popMiddle", "popMiddle", "popBack", "popFront"]
[[], [1], [2], [3], [4], [], [], [], [], []]
Output:
[null, null, null, null, null, 1, 3, 4, 2, -1]

Explanation:
FrontMiddleBackQueue q = new FrontMiddleBackQueue();
q.pushFront(1);   // [1]
q.pushBack(2);    // [1,2]
q.pushMiddle(3);  // [1,3, 2]
q.pushMiddle(4);  // [1,4, 3, 2]
q.popFront();     // return 1 -> [4, 3, 2]
q.popMiddle();    // return 3 -> [4, 2]
q.popMiddle();    // return 4 -> [2]
q.popBack();      // return 2 -> []
q.popFront();     // return -1 -> [] (The queue is empty)
```

</aside>

<aside>
ðŸ’¡ **Question 8**

For a stream of integers, implement a data structure that checks if the last `k` integers parsed in the stream are **equal** to `value`.

Implement the **DataStream** class:

- `DataStream(int value, int k)` Initializes the object with an empty integer stream and the two integers `value` and `k`.
- `boolean consec(int num)` Adds `num` to the stream of integers. Returns `true` if the last `k` integers are equal to `value`, and `false` otherwise. If there are less than `k` integers, the condition does not hold true, so returns `false`.

**Example 1:**

</aside>

ðŸ’¡ Question 1

To find the first non-repeating character in a string and return its index, we can use a frequency map to count the occurrences of each character. Then, we iterate through the string and check the frequency of each character. If the frequency is 1, we return its index.

Here's the solution:


def firstNonRepeatingChar(s):
    frequency = {}
    
    # Count the occurrences of each character
    for char in s:
        frequency[char] = frequency.get(char, 0) + 1
    
    # Find the first non-repeating character
    for i in range(len(s)):
        if frequency[s[i]] == 1:
            return i
    
    return -1
Example usage:


s = "leetcode"
index = firstNonRepeatingChar(s)
print(index)  # Output: 0
ðŸ’¡ Question 2

To find the maximum possible sum of a non-empty subarray in a circular integer array, we can use the Kadane's algorithm. The idea is to calculate the maximum subarray sum in two cases: one without wrapping around (using Kadane's algorithm) and another with wrapping around. The maximum of these two sums will be the answer.

Here's the solution:


def maxSubarraySumCircular(nums):
    # Calculate maximum subarray sum without wrapping
    max_sum_without_wrap = kadane(nums)
    
    # Calculate total sum of the array
    total_sum = sum(nums)
    
    # Negate the array elements and calculate the minimum subarray sum without wrapping
    neg_nums = [-num for num in nums]
    min_sum_without_wrap = kadane(neg_nums)
    
    # Calculate maximum subarray sum with wrapping
    max_sum_with_wrap = total_sum - (-min_sum_without_wrap)
    
    # Return the maximum of the two sums
    return max(max_sum_without_wrap, max_sum_with_wrap)

def kadane(nums):
    max_sum = float('-inf')
    curr_sum = 0
    
    for num in nums:
        curr_sum = max(curr_sum + num, num)
        max_sum = max(max_sum, curr_sum)
    
    return max_sum
Example usage:


nums = [1, -2, 3, -2]
max_sum = maxSubarraySumCircular(nums)
print(max_sum)  # Output: 3
ðŸ’¡ Question 3

To determine the number of students that are unable to eat in the cafeteria scenario, we can simulate the process using two pointers. We keep track of the index of the current sandwich and the index of the current student. If the preference of the current student matches the type of the current sandwich, the student takes the sandwich and both indices move forward. Otherwise, the student goes to the end of the queue and the sandwich remains on top of the stack. We continue this process until there are no more sandwiches or all students have taken sandwiches.

Here's the solution:


def countStudents(students, sandwiches):
    stack = sandwiches[::-1]
    pointer = 0
    
    while stack:
        if students[pointer] == stack[-1]:
            stack.pop()
        else:
            pointer += 1
            if pointer == len(students):
                pointer = 0
        if pointer == 0:
            break
    
    return len(stack)
Example usage:


students = [1, 1, 0, 0]
sandwiches = [0, 1, 0, 1]
count = countStudents(students, sandwiches)
print(count)  # Output: 0
ðŸ’¡ Question 4

To implement the RecentCounter class that counts the number of recent requests within a certain time frame, we can use a queue to store the timestamps of the requests. When a new request comes in, we add its timestamp to the queue. Then, we remove all the timestamps from the front of the queue that are outside the time frame. Finally, we return the size of the queue, which represents the number of requests within the time frame.

Here's the solution:


from collections import deque

class RecentCounter:
    def __init__(self):
        self.requests = deque()

    def ping(self, t):
        self.requests.append(t)
        while self.requests[0] < t - 3000:
            self.requests.popleft()
        return len(self.requests)
Example usage:

recentCounter = RecentCounter()
print(recentCounter.ping(1))     # Output: 1
print(recentCounter.ping(100))   # Output: 2
print(recentCounter.ping(3001))  # Output: 3
print(recentCounter.ping(3002))  # Output: 3
ðŸ’¡ Question 5

To determine the winner of the game in which friends are sitting in a circle and losing the game, we can simulate the game using a circular linked list. We represent each friend as a node in the linked list and use a counter to keep track of the number of friends remaining. Starting from the first friend, we count k friends and remove the last friend counted from the circle. We repeat this process until only one friend is left.

Here's the solution:


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def findTheWinner(n, k):
    if n == 1:
        return 1
    
    # Create circular linked list
    head = ListNode(1)
    curr = head
    for i in range(2, n + 1):
        curr.next = ListNode(i)
        curr = curr.next
    curr.next = head
    
    # Find the winner
    curr = head
    prev = None
    while curr.next != curr:
        for _ in range(k - 1):
            prev = curr
            curr = curr.next
        prev.next = curr.next
        curr = curr.next
    
    return curr.val
Example usage:


n = 5
k = 2
winner = findTheWinner(n, k)
print(winner)  # Output: 3
ðŸ’¡ Question 6

To order a deck of cards in a specific way, we can simulate the process described in the question. We use a queue to represent the deck, and for each step, we pop the front card, reveal it, and then push it to the back of the deck if there are still unrevealed cards. We repeat this process until all cards are revealed.

Here's the solution:


from collections import deque

def deckRevealedIncreasing(deck):
    n = len(deck)
    indices = deque(range(n))
    result = [0] * n
    deck.sort()

    for card in deck:
        result[indices.popleft()] = card
        if indices:
            indices.append(indices.popleft())

    return result
Example usage:

deck = [17, 13, 11, 2, 3, 5, 7]
ordered_deck = deckRevealedIncreasing(deck)
print(ordered_deck)  # Output: [2, 13, 3, 11, 5, 17, 7]
ðŸ’¡ Question 7

To implement a queue that supports push and pop operations in the front, middle, and back, we can use two deques to represent the front and back halves of the queue. When pushing an element to the front, we append it to the front deque. When pushing an element to the back, we append it to the back deque. When pushing an element to the middle, we rotate the front and back deques so that they have approximately the same number of elements, and then append the element to the back deque. When popping an element from the front, we pop from the front deque if it is not empty; otherwise, we rotate the back deque and pop from its front. When popping an element from the middle, we determine the deque with more elements and pop from its back. When popping an element from the back, we pop from the back deque if it is not empty; otherwise, we rotate the front deque and pop from its back.

Here's the solution:


from collections import deque

class FrontMiddleBackQueue:
    def __init__(self):
        self.front = deque()
        self.back = deque()

    def pushFront(self, val):
        self.front.appendleft(val)
        self.balance()

    def pushMiddle(self, val):
        if len(self.front) > len(self.back):
            self.back.appendleft(self.front.pop())
        self.front.append(val)
        self.balance()

    def pushBack(self, val):
        self.back.append(val)
        self.balance()

    def popFront(self):
        if self.front:
            return self.front.popleft()
        elif self.back:
            self.rotateBackToFront()
            return self.front.popleft()
        else:
            return -1

    def popMiddle(self):
        if len(self.front) == len(self.back):
            return self.front.pop()
        else:
            self.rotateFrontToBack()
            return self.back.pop()

    def popBack(self):
        if self.back:
            return self.back.pop()
        elif self.front:
            self.rotateFrontToBack()
            return self.back.pop()
        else:
            return -1

    def balance(self):
        if len(self.front) > len(self.back) + 1:
            self.back.appendleft(self.front.pop())
        elif len(self.back) > len(self.front):
            self.front.append(self.back.popleft())

    def rotateFrontToBack(self):
        while len(self.front) > 1:
            self.back.appendleft(self.front.pop())

    def rotateBackToFront(self):
        while len(self.back) > 0:
            self.front.append(self.back.popleft())
Example usage:

        
q = FrontMiddleBackQueue()
q.pushFront(1)    # [1]
q.pushBack(2)     # [1, 2]
q.pushMiddle(3)   # [1, 3, 2]
q.pushMiddle(4)   # [1, 4, 3, 2]
print(q.popFront())   # Output: 1, q = [4, 3, 2]
print(q.popMiddle())  # Output: 3, q = [4, 2]
print(q.popMiddle())  # Output: 4, q = [2]
print(q.popBack())    # Output: 2, q = []
print(q.popFront())   # Output: -1, q = []
ðŸ’¡ Question 8

To implement a data structure that checks if the last k integers parsed in the stream are equal to value, we can use a deque to store the last k integers. When a new integer is parsed, we add it to the deque and remove the oldest integer if the deque's size exceeds k. Then, we compare the integers in the deque to value and return true if they are all equal; otherwise, we return false.

Here's the solution:


from collections import deque

class DataStream:
    def __init__(self, value, k):
        self.stream = deque()
        self.value = value
        self.k = k

    def consec(self, num):
        self.stream.append(num)
        if len(self.stream) > self.k:
            self.stream.popleft()
        return len(self.stream) == self.k and all(x == self.value for x in self.stream)
Example usage:


stream = DataStream(5, 3)
print(stream.consec(5))  # Output: false
print(stream.consec(1))  # Output: false
print(stream.consec(5))  # Output: false
print(stream.consec(5))  # Output: true