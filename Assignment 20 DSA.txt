# Assignment Questions 20

<aside>
ðŸ’¡ Question-1

Given a binary tree, your task is to find subtree with maximum sum in tree.

Examples:

Input1 : Â  Â  Â  

       1

     / Â  \

   2Â  Â  Â  3

  / \Â  Â  / \

4 Â  5Â  6 Â  7

Output1 : 28

As all the tree elements are positive, the largest subtree sum is equal to sum of all tree elements.

Input2 :

 Â  Â  Â  1

     /Â  Â  \

  -2Â  Â  Â  3

  / \Â  Â  /Â  \

4 Â  5Â  -6 Â  2

Output2 : 7

Subtree with largest sum is :

 -2

 / \

4 Â  5

Also, entire tree sum is also 7.

</aside>

<aside>
ðŸ’¡ Question-2

Construct the BST (Binary Search Tree) from its given level order traversal.

Example:

Input: arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}

Output: BST:

            7

         /Â  Â  \

       4 Â  Â  12

     /Â  \ Â  Â  /

    3 Â  6Â  8

   / Â   / Â    \

 1Â    5  Â    10

</aside>

<aside>
ðŸ’¡ Question-3

Given an array of size n. The problem is to check whether the given array can represent the level order traversal of a Binary Search Tree or not.

Examples:

Input1 : arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}

Output1 : Yes

For the given arr[], the Binary Search Tree is:

            7

         /Â  Â  \

       4 Â  Â  12

     /Â  \ Â  Â  /

    3 Â  6Â  8

   / Â   / Â    \

 1Â    5  Â    10

Input2 : arr[] = {11, 6, 13, 5, 12, 10}

Output2 : No

The given arr[] does not represent the level order traversal of a BST.

</aside>

----Assignment Answers 20-----

ðŸ’¡ Question 1: Subtree with Maximum Sum

To find the subtree with the maximum sum in a binary tree, we can perform a post-order traversal of the tree and calculate the sum of each subtree. During the traversal, we keep track of the maximum sum found so far and the corresponding subtree. At each node, we calculate the sum of the current subtree by adding the values of the left and right subtrees along with the value of the current node. We compare this sum with the maximum sum found so far and update the maximum sum and subtree if necessary.

Here's the solution:


class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def maxSubtreeSum(root):
    max_sum = float('-inf')
    max_subtree = None

    def postorder(node):
        nonlocal max_sum, max_subtree

        if node is None:
            return 0

        left_sum = postorder(node.left)
        right_sum = postorder(node.right)

        # Calculate the sum of the current subtree
        curr_sum = left_sum + right_sum + node.val

        # Update the maximum sum and subtree
        if curr_sum > max_sum:
            max_sum = curr_sum
            max_subtree = node

        return curr_sum

    postorder(root)

    return max_sum
ðŸ’¡ Question 2: Construct BST from Level Order Traversal

To construct a binary search tree (BST) from its level order traversal, we can start by creating the root node from the first element of the array. Then, for each subsequent element in the array, we traverse the tree from the root and find the appropriate position to insert the element based on the BST property. To maintain the BST property, if the element is less than the current node's value, we move to the left subtree; otherwise, we move to the right subtree. Finally, we return the root node of the constructed BST.

Here's the solution:


class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def constructBSTFromLevelOrder(arr):
    if not arr:
        return None

    root = TreeNode(arr[0])
    queue = [root]
    i = 1

    while i < len(arr):
        node = queue.pop(0)

        if i < len(arr) and arr[i] < node.val:
            node.left = TreeNode(arr[i])
            queue.append(node.left)
            i += 1

        if i < len(arr) and arr[i] > node.val:
            node.right = TreeNode(arr[i])
            queue.append(node.right)
            i += 1

    return root
ðŸ’¡ Question 3: Level Order Traversal as BST Check

To check whether the given array can represent the level order traversal of a binary search tree (BST), we can iterate through the array and check if each element is within the valid range for its position in the BST. We maintain two pointers, min_value and max_value, which represent the minimum and maximum values allowed for the elements in the current subtree. Initially, the min_value is set to negative infinity, and the max_value is set to positive infinity. As we process each element in the array, we update the min_value and max_value based on the BST property. If any element violates the BST property, we return False. If all elements pass the check, we return True.

Here's the solution:

def isValidLevelOrderTraversal(arr):
    n = len(arr)

    if n <= 2:
        return True

    stack = []
    root = float('-inf')
    min_value = float('-inf')
    max_value = float('inf')

    for i in range(n - 1):
        if arr[i] > max_value or arr[i] < min_value:
            return False

        if arr[i] < arr[i + 1]:
            stack.append(arr[i])
            min_value = stack[-1]
        else:
            while stack and arr[i] > stack[-1]:
                root = stack.pop()

            min_value = root
            max_value = stack[-1] if stack else float('inf')

    return True
These are the solutions to the provided questions. Let me know if you need help with anything else.