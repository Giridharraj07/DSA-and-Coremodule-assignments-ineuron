# Assignment Questions 8

<aside>
ðŸ’¡ **Question 1**

Given two strings s1 and s2, return *the lowest **ASCII** sum of deleted characters to make two strings equal*.

**Example 1:**

**Input:** s1 = "sea", s2 = "eat"

**Output:** 231

**Explanation:** Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.

Deleting "t" from "eat" adds 116 to the sum.

At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.

</aside>

<aside>
ðŸ’¡ **Question 2**

Given a string s containing only three types of characters: '(', ')' and '*', return true *if* s *is **valid***.

The following rules define a **valid** string:

- Any left parenthesis '(' must have a corresponding right parenthesis ')'.
- Any right parenthesis ')' must have a corresponding left parenthesis '('.
- Left parenthesis '(' must go before the corresponding right parenthesis ')'.
- '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".

**Example 1:**

**Input:** s = "()"

**Output:**

true

</aside>

<aside>
ðŸ’¡ **Question 3**

Given two strings word1 and word2, return *the minimum number of **steps** required to make* word1 *and* word2 *the same*.

In one **step**, you can delete exactly one character in either string.

**Example 1:**

**Input:** word1 = "sea", word2 = "eat"

**Output:** 2

**Explanation:** You need one step to make "sea" to "ea" and another step to make "eat" to "ea".

</aside>
<aside>
ðŸ’¡ **Question 5**

Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of **consecutive repeating characters** in chars:

- If the group's length is 1, append the character to s.
- Otherwise, append the character followed by the group's length.

The compressed string s **should not be returned separately**, but instead, be stored **in the input character array chars**. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done **modifying the input array,** return *the new length of the array*.

You must write an algorithm that uses only constant extra space.

**Example 1:**

**Input:** chars = ["a","a","b","b","c","c","c"]

**Output:** Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]

**Explanation:**

The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".

</aside>

<aside>
ðŸ’¡ **Question 6**

Given two strings s and p, return *an array of all the start indices of* p*'s anagrams in* s. You may return the answer in **any order**.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

**Example 1:**

**Input:** s = "cbaebabacd", p = "abc"

**Output:** [0,6]

**Explanation:**

The substring with start index = 0 is "cba", which is an anagram of "abc".

The substring with start index = 6 is "bac", which is an anagram of "abc".

</aside>

<aside>
ðŸ’¡ **Question 7**

Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.

**Example 1:**

**Input:** s = "3[a]2[bc]"

**Output:** "aaabcbc"

</aside>

<aside>
ðŸ’¡ **Question 8**

Given two strings s and goal, return true *if you can swap two letters in* s *so the result is equal to* goal*, otherwise, return* false*.*

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

- For example, swapping at indices 0 and 2 in "abcd" results in "cbad".

**Example 1:**

**Input:** s = "ab", goal = "ba"

**Output:** true

**Explanation:** You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.

</aside>

<aside>
ðŸ’¡ **Question 5**

Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of **consecutive repeating characters** in chars:

- If the group's length is 1, append the character to s.
- Otherwise, append the character followed by the group's length.

The compressed string s **should not be returned separately**, but instead, be stored **in the input character array chars**. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done **modifying the input array,** return *the new length of the array*.

You must write an algorithm that uses only constant extra space.

**Example 1:**

**Input:** chars = ["a","a","b","b","c","c","c"]

**Output:** Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]

**Explanation:**

The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".

</aside>

<aside>
ðŸ’¡ **Question 6**

Given two strings s and p, return *an array of all the start indices of* p*'s anagrams in* s. You may return the answer in **any order**.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

**Example 1:**

**Input:** s = "cbaebabacd", p = "abc"

**Output:** [0,6]

**Explanation:**

The substring with start index = 0 is "cba", which is an anagram of "abc".

The substring with start index = 6 is "bac", which is an anagram of "abc".

</aside>

<aside>
ðŸ’¡ **Question 7**

Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.

**Example 1:**

**Input:** s = "3[a]2[bc]"

**Output:** "aaabcbc"

</aside>

<aside>
ðŸ’¡ **Question 8**

Given two strings s and goal, return true *if you can swap two letters in* s *so the result is equal to* goal*, otherwise, return* false*.*

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

- For example, swapping at indices 0 and 2 in "abcd" results in "cbad".

**Example 1:**

**Input:** s = "ab", goal = "ba"

**Output:** true

**Explanation:** You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.

</aside>

-----Assignment 8 answers----
To find the lowest ASCII sum of deleted characters to make two strings equal, we can use dynamic programming. We'll create a 2D table to store the minimum ASCII sum at each position of the two strings. At each position, we'll compare the characters and decide whether to delete them or keep them. The final result will be the value at the bottom-right cell of the table.

Here's the solution:


def minimumDeleteSum(s1: str, s2: str) -> int:
    m, n = len(s1), len(s2)
    dp = [[0] * (n+1) for _ in range(m+1)]
    
    for i in range(1, m+1):
        dp[i][0] = dp[i-1][0] + ord(s1[i-1])
    
    for j in range(1, n+1):
        dp[0][j] = dp[0][j-1] + ord(s2[j-1])
    
    for i in range(1, m+1):
        for j in range(1, n+1):
            if s1[i-1] == s2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = min(dp[i-1][j] + ord(s1[i-1]), dp[i][j-1] + ord(s2[j-1]))
    
    return dp[m][n]
Example usage:


s1 = "sea"
s2 = "eat"
print(minimumDeleteSum(s1, s2))  # Output: 231
ðŸ’¡ Question 2

To determine if a string s is valid, we can use a stack to keep track of the opening parentheses encountered. When we encounter a closing parenthesis, we check if the stack is empty. If it is, we can consider the closing parenthesis as a valid match for an opening parenthesis. If the stack is not empty, we pop an opening parenthesis from the stack. Additionally, we use two counters to keep track of the number of wildcards ('*') encountered, which can be used to balance the parentheses.

Here's the solution:


def checkValidString(s: str) -> bool:
    stack = []
    wildcard_count = 0
    open_count = 0
    
    for char in s:
        if char == '(':
            stack.append(char)
            open_count += 1
        elif char == '*':
            stack.append(char)
            wildcard_count += 1
        elif char == ')':
            if open_count > 0:
                open_count -= 1
                stack.pop()
            elif wildcard_count > 0:
                wildcard_count -= 1
                stack.pop()
            else:
                return False
    
    while stack and wildcard_count > 0:
        if stack.pop() == '(':
            wildcard_count -= 1
            open_count -= 1
    
    return open_count == 0
Example usage:


s = "()"
print(checkValidString(s))  # Output: True
ðŸ’¡ Question 3

To find the minimum number of steps required to make two words the same by deleting characters, we can use dynamic programming. We'll create a 2D table to store the minimum number of steps at each position of the two words. At each position, we'll compare the characters and decide whether to delete them or keep them. The final result will be the value at the bottom-right cell of the table.

Here's the solution:


def minDistance(word1: str, word2: str) -> int:
    m, n = len(word1), len(word2)
    dp = [[0] * (n+1) for _ in range(m+1)]
    
    for i in range(1, m+1):
        dp[i][0] = dp[i-1][0] + 1
    
    for j in range(1, n+1):
        dp[0][j] = dp[0][j-1] + 1
    
    for i in range(1, m+1):
        for j in range(1, n+1):
            if word1[i-1] == word2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1
    
    return dp[m][n]
Example usage:


word1 = "sea"
word2 = "eat"
print(minDistance(word1, word2))  # Output: 2

ðŸ’¡ Question 5

To compress the given array of characters using the provided algorithm, we can use two pointers: read and write. The read pointer iterates through the array, counting consecutive repeating characters and updating the compressed string accordingly. The write pointer updates the array in-place with the compressed characters.

Here's the solution:
def compress(chars):
    read = 0  # Read pointer
    write = 0  # Write pointer
    
    # Iterate through the array
    while read < len(chars):
        current_char = chars[read]
        count = 0
        
        # Count consecutive repeating characters
        while read < len(chars) and chars[read] == current_char:
            read += 1
            count += 1
        
        # Update the array with the compressed characters
        chars[write] = current_char
        write += 1
        
        if count > 1:
            count_str = str(count)
            for c in count_str:
                chars[write] = c
                write += 1
    
    return write
Example usage:


chars = ["a", "a", "b", "b", "c", "c", "c"]
print(compress(chars))  # Output: 6
print(chars[:6])  # Output: ["a", "2", "b", "2", "c", "3"]
ðŸ’¡ Question 6

To find the start indices of p's anagrams in s, we can use the sliding window technique. We'll use two arrays, p_count and s_count, to store the frequency of characters in p and the current window in s. We'll initialize the window with the length of p and slide it through s, comparing the frequency arrays at each position.

Here's the solution:


from collections import Counter

def findAnagrams(s, p):
    p_count = Counter(p)
    s_count = Counter(s[:len(p)])
    result = []
    
    # Check the initial window
    if p_count == s_count:
        result.append(0)
    
    # Slide the window through s
    for i in range(len(p), len(s)):
        s_count[s[i]] += 1
        s_count[s[i-len(p)]] -= 1
        
        if s_count[s[i-len(p)]] == 0:
            del s_count[s[i-len(p)]]
        
        if p_count == s_count:
            result.append(i - len(p) + 1)
    
    return result
Example usage:


s = "cbaebabacd"
p = "abc"
print(findAnagrams(s, p))  # Output: [0, 6]
ðŸ’¡ Question 7

To decode the given encoded string, we can use a stack to keep track of the current decoded string. We iterate through the characters of the input string, following the encoding rule. When we encounter an opening bracket, we push the current decoded string and the number (k) before the bracket onto the stack. When we encounter a closing bracket, we pop the number and the previously decoded string from the stack and append the decoded string k times to the current decoded string.

Here's the solution:


def decodeString(s):
    stack = []
    current_str = ""
    current_num = 0
    
    for char in s:
        if char.isdigit():
            current_num = current_num * 10 + int(char)
        elif char == "[":
            stack.append((current_str, current_num))
            current_str = ""
            current_num = 0
        elif char == "]":
            prev_str, prev_num = stack.pop()
            current_str = prev_str + current_str * prev_num
        else:
            current_str += char
    
    return current_str
Example usage:


s = "3[a]2[bc]"
print(decodeString(s))  # Output: "aaabcbc"
ðŸ’¡ Question 8

To determine if we can swap two letters in s to make it equal to goal, we need to check two conditions:

The number of characters that are different between s and goal should be exactly 2.
The positions of the different characters should be swapped.
Here's the solution:


def buddyStrings(s, goal):
    if len(s) != len(goal):
        return False
    
    if s == goal:
        return len(set(s)) < len(s)
    
    diff = []
    for i in range(len(s)):
        if s[i] != goal[i]:
            diff.append((s[i], goal[i]))
    
    return len(diff) == 2 and diff[0] == diff[1][::-1]
Example usage:


s = "ab"
goal = "ba"
print(buddyStrings(s, goal))  # Output: True