# Assignment Questions 18

<aside>
ğŸ’¡ 1. **Merge Intervals**

Given an arrayÂ ofÂ `intervals`Â whereÂ `intervals[i] = [starti, endi]`, merge all overlapping intervals, and returnÂ *an array of the non-overlapping intervals that cover all the intervals in the input*.

**Example 1:**

```
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

```

**Example 2:**

```
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

```

**Constraints:**

- `1 <= intervals.length <= 10000`
- `intervals[i].length == 2`
- `0 <= starti <= endi <= 10000`
</aside>

<aside>
ğŸ’¡ 2. **Sort Colors**

Given an arrayÂ `nums`Â withÂ `n`Â objects colored red, white, or blue, sort themÂ **[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)**Â so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integersÂ `0`,Â `1`, andÂ `2`Â to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

**Example 1:**

```
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

```

**Example 2:**

```
Input: nums = [2,0,1]
Output: [0,1,2]

```

**Constraints:**

- `n == nums.length`
- `1 <= n <= 300`
- `nums[i]`Â is eitherÂ `0`,Â `1`, orÂ `2`.
</aside>

<aside>
ğŸ’¡ 3. **First Bad Version Solution**

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you haveÂ `n`Â versionsÂ `[1, 2, ..., n]`Â and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an APIÂ `bool isBadVersion(version)`Â which returns whetherÂ `version`Â is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

**Example 1:**

```
Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5)Â -> true
call isBadVersion(4)Â -> true
Then 4 is the first bad version.

```

**Example 2:**

```
Input: n = 1, bad = 1
Output: 1

```

**Constraints:**

- `1 <= bad <= n <= 2^31Â - 1`
</aside>

<aside>
ğŸ’¡ 4. **Maximum Gap**

Given an integer arrayÂ `nums`, returnÂ *the maximum difference between two successive elements in its sorted form*. If the array contains less than two elements, returnÂ `0`.

You must write an algorithm that runs in linear time and uses linear extra space.

**Example 1:**

```
Input: nums = [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.

```

**Example 2:**

```
Input: nums = [10]
Output: 0
Explanation: The array contains less than 2 elements, therefore return 0.

```

**Constraints:**

- `1 <= nums.length <= 10^5`
- `0 <= nums[i] <= 10^9`
</aside>

<aside>
ğŸ’¡ 5. **Contains Duplicate**

Given an integer arrayÂ `nums`, returnÂ `true`Â if any value appearsÂ **at least twice**Â in the array, and returnÂ `false`Â if every element is distinct.

**Example 1:**

```
Input: nums = [1,2,3,1]
Output: true

```

**Example 2:**

```
Input: nums = [1,2,3,4]
Output: false

```

**Example 3:**

```
Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true

```

**Constraints:**

- `1 <= nums.length <= 10^5`
- `109 <= nums[i] <= 10^9`
</aside>

<aside>
ğŸ’¡ 6. **Minimum Number of Arrows to Burst Balloons**

There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer arrayÂ `points`Â whereÂ `points[i] = [xstart, xend]`Â denotes a balloon whoseÂ **horizontal diameter**Â stretches betweenÂ `xstart`Â andÂ `xend`. You do not know the exact y-coordinates of the balloons.

Arrows can be shot upÂ **directly vertically**Â (in the positive y-direction) from different points along the x-axis. A balloon withÂ `xstart`Â andÂ `xend`Â isÂ **burst**Â by an arrow shot atÂ `x`Â ifÂ `xstart <= x <= xend`. There isÂ **no limit**Â to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the arrayÂ `points`, returnÂ *theÂ **minimum**Â number of arrows that must be shot to burst all balloons*.

**Example 1:**

```
Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].

```

**Example 2:**

```
Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4
Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.

```

**Example 3:**

```
Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].
- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].

```

**Constraints:**

- `1 <= points.length <= 10^5`
- `points[i].length == 2`
- `231 <= xstart < xend <= 2^31 - 1`
</aside>

<aside>
ğŸ’¡ 7. **Longest Increasing Subsequence**

Given an integer arrayÂ `nums`, returnÂ *the length of the longestÂ **strictly increasing***

***subsequence***

.

**Example 1:**

```
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

```

**Example 2:**

```
Input: nums = [0,1,0,3,2,3]
Output: 4

```

**Example 3:**

```
Input: nums = [7,7,7,7,7,7,7]
Output: 1

```

**Constraints:**

- `1 <= nums.length <= 2500`
- `-10^4 <= nums[i] <= 10^4`
</aside>

<aside>
ğŸ’¡ 8. **132 Pattern**

Given an array ofÂ `n`Â integersÂ `nums`, aÂ **132 pattern**Â is a subsequence of three integersÂ `nums[i]`,Â `nums[j]`Â andÂ `nums[k]`Â such thatÂ `i < j < k`Â andÂ `nums[i] < nums[k] < nums[j]`.

ReturnÂ `true`Â *if there is aÂ **132 pattern**Â in*Â `nums`*, otherwise, return*Â `false`*.*

**Example 1:**

```
Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.

```

**Example 2:**

```
Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].

```

**Example 3:**

```
Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].

```

**Constraints:**

- `n == nums.length`
- `1 <= n <= 2 * 10^5`
- `-10^9 <= nums[i] <= 10^9`

</aside>

-----Assignment 18 DSA------
ğŸ’¡ Question 1: Merge Intervals

To merge overlapping intervals, we can first sort the intervals based on their start times. Then, we iterate through the sorted intervals and check if the current interval overlaps with the previous interval. If it does, we merge them; otherwise, we add the current interval to the result.

Here's the solution:


def merge(intervals):
    intervals.sort(key=lambda x: x[0])
    merged = [intervals[0]]

    for interval in intervals[1:]:
        if interval[0] <= merged[-1][1]:
            merged[-1][1] = max(merged[-1][1], interval[1])
        else:
            merged.append(interval)

    return merged
Example usage:


intervals = [[1,3],[2,6],[8,10],[15,18]]
merged_intervals = merge(intervals)
print(merged_intervals)  # Output: [[1, 6], [8, 10], [15, 18]]
ğŸ’¡ Question 2: Sort Colors

To sort an array of colors in-place, we can use the Dutch National Flag algorithm, also known as the "Three-Way Partitioning" algorithm. The idea is to maintain three pointers: low, mid, and high. The low pointer keeps track of the boundary between 0s and 1s, the mid pointer scans the array, and the high pointer keeps track of the boundary between 1s and 2s.

Here's the solution:


def sortColors(nums):
    low = 0
    mid = 0
    high = len(nums) - 1

    while mid <= high:
        if nums[mid] == 0:
            nums[low], nums[mid] = nums[mid], nums[low]
            low += 1
            mid += 1
        elif nums[mid] == 1:
            mid += 1
        else:
            nums[mid], nums[high] = nums[high], nums[mid]
            high -= 1

    return nums
Example usage:


nums = [2,0,2,1,1,0]
sorted_nums = sortColors(nums)
print(sorted_nums)  # Output: [0, 0, 1, 1, 2, 2]
ğŸ’¡ Question 3: First Bad Version Solution

To find the first bad version efficiently, we can use a binary search algorithm. We start with the range of versions [1, n], and repeatedly divide the range in half by checking the middle version. If the middle version is bad, we update the upper bound to the middle version. Otherwise, we update the lower bound to the next version after the middle. We continue this process until the lower bound is equal to the upper bound, which represents the first bad version.

Here's the solution:


def firstBadVersion(n):
    left = 1
    right = n

    while left < right:
        mid = left + (right - left) // 2
        if isBadVersion(mid):
            right = mid
        else:
            left = mid + 1

    return left
Example usage
n = 5
bad = 4
first_bad = firstBadVersion(n)
print(first_bad)  # Output: 4
ğŸ’¡ Question 4: Maximum Gap

To find the maximum gap between successive elements in a sorted form, we can use the concept of the "pigeonhole principle." If we have n elements and m pigeonholes, and we distribute the n elements into the m pigeonholes, there must be at least one empty pigeonhole. In the case of finding the maximum gap, the pigeonholes represent buckets, and we distribute the elements into the buckets based on their value ranges.

Here's the solution:


def maximumGap(nums):
    if len(nums) < 2:
        return 0

    # Find the minimum and maximum values in the array
    min_val = min(nums)
    max_val = max(nums)

    # Compute the size of each bucket
    bucket_size = max(1, (max_val - min_val) // (len(nums) - 1))

    # Compute the number of buckets
    num_buckets = (max_val - min_val) // bucket_size + 1

    # Initialize the buckets
    buckets = [[float('inf'), float('-inf')] for _ in range(num_buckets)]

    # Update the buckets with the minimum and maximum values of each range
    for num in nums:
        index = (num - min_val) // bucket_size
        buckets[index][0] = min(buckets[index][0], num)
        buckets[index][1] = max(buckets[index][1], num)

    # Compute the maximum gap
    max_gap = 0
    prev_max = min_val
    for bucket in buckets:
        if bucket[0] != float('inf') and bucket[1] != float('-inf'):
            max_gap = max(max_gap, bucket[0] - prev_max)
            prev_max = bucket[1]

    return max_gap
Example usage:


nums = [3,6,9,1]
max_gap = maximumGap(nums)
print(max_gap)  # Output: 3
ğŸ’¡ Question 5: Contains Duplicate

To check if an array contains any duplicate elements, we can use a set data structure. We iterate through the array and add each element to the set. If we encounter an element that is already in the set, it means there is a duplicate, and we return True. If we reach the end of the array without finding any duplicates, we return False.

Here's the solution:


def containsDuplicate(nums):
    seen = set()

    for num in nums:
        if num in seen:
            return True
        seen.add(num)

    return False
Example usage:


nums = [1,2,3,1]
contains_dup = containsDuplicate(nums)
print(contains_dup)  # Output: True
ğŸ’¡ Question 6: Minimum Number of Arrows to Burst Balloons

To find the minimum number of arrows required to burst all the balloons, we can sort the intervals based on their end points. Then, we iterate through the intervals and count the number of times we need to shoot an arrow to burst the balloons. Whenever the start of the current interval is greater than the current arrow position, we need to shoot a new arrow.

Here's the solution:


def findMinArrowShots(points):
    if len(points) == 0:
        return 0

    points.sort(key=lambda x: x[1])
    arrow_pos = points[0][1]
    shots = 1

    for interval in points:
        if interval[0] > arrow_pos:
            arrow_pos = interval[1]
            shots += 1

    return shots
Example usage:


points = [[10,16],[2,8],[1,6],[7,12]]
min_shots = findMinArrowShots(points)
print(min_shots)  # Output: 2
ğŸ’¡ Question 7: Longest Increasing Subsequence

To find the length of the longest strictly increasing subsequence, we can use a dynamic programming approach. We create a dynamic programming array dp of length n, where dp[i] represents the length of the longest increasing subsequence ending at index i. We initialize all elements of dp to 1 because each element itself is a subsequence of length 1.

Then, for each index i from 1 to n-1, we iterate over the indices from 0 to i-1 to find the maximum dp[j] + 1 where j is less than i and nums[j] < nums[i]. This means we can extend the subsequence ending at index j with the current element nums[i]. We update dp[i] with the maximum value found.

Finally, we return the maximum value in the dp array as the length of the longest increasing subsequence.

Here's the solution:
def lengthOfLIS(nums):
    n = len(nums)
    dp = [1] * n

    for i in range(1, n):
        for j in range(i):
            if nums[j] < nums[i]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
Example usage:


nums = [10,9,2,5,3,7,101,18]
length = lengthOfLIS(nums)
print(length)  # Output: 4
ğŸ’¡ Question 8: 132 Pattern

To check if there is a 132 pattern in the given array, we can use a stack. The idea is to keep track of the maximum value (max_val) found so far and maintain a stack (stack) to store potential 3 values. We iterate through the array from right to left and perform the following steps:

If the current element is greater than max_val, update max_val with the current element.
If the current element is less than max_val, it can be a potential 1 or 2 value. We check if there are any elements in the stack that are less than the current element. If we find such an element, it means we have found a 1 value. We pop elements from the stack until we find an element that is greater than the current element. The popped elements are potential 3 values. If we find such an element, we have found a 2 value, and we return True.
If we reach the end of the iteration without finding a 2 value, we return False.
Here's the solution:


def find132pattern(nums):
    stack = []
    max_val = float('-inf')

    for i in range(len(nums)-1, -1, -1):
        if nums[i] < max_val:
            while stack and stack[-1] <= nums[i]:
                stack.pop()
            if stack and stack[-1] < nums[i]:
                return True
            stack.append(nums[i])
        else:
            max_val = nums[i]

    return False
Example usage:


nums = [1,2,3,4]
pattern_found = find132pattern(nums)
print(pattern_found)  # Output: False