# Assignment Questions 15

<aside>
ðŸ’¡ **Question 1**

Given an arrayÂ **arr[ ]**Â of sizeÂ **N**Â havingÂ elements, theÂ task is to find the next greater element for each element of the array in order of their appearance in the array.Next greater element of an element in the array is the nearest element on the right which is greater than the current element.If there does not exist next greater of current element, then next greater element for current element is -1. For example, next greater of the last element is always -1.

**Example 1:**

```
Input:
N = 4, arr[] = [1 3 2 4]
Output:
3 4 4 -1
Explanation:
In the array, the next larger element
to 1 is 3 , 3 is 4 , 2 is 4 and for 4 ?
since it doesn't exist, it is -1.

```

**Example 2:**

```
Input:
N = 5, arr[] [6 8 0 1 3]
Output:
8 -1 1 3 -1
Explanation:
In the array, the next larger element to
6 is 8, for 8 there is no larger elements
hence it is -1, for 0 it is 1 , for 1 it
is 3 and then for 3 there is no larger
element on right and hence -1.
```

</aside>

<aside>
ðŸ’¡ **Question 2**

Given an arrayÂ **a**Â of integers of lengthÂ **n**, find the nearest smaller number for every element such that the smaller element is on left side.If no small element present on the left print -1.

**Example 1:**

```
Input: n = 3
a = {1, 6, 2}
Output: -1 1 1
Explaination: There is no number at the
left of 1. Smaller number than 6 and 2 is 1.
```

**Example 2:**

```
Input: n = 6
a = {1, 5, 0, 3, 4, 5}
Output: -1 1 -1 0 3 4
Explaination: Upto 3 it is easy to see
the smaller numbers. But for 4 the smaller
numbers are 1, 0 and 3. But among them 3
is closest. Similary for 5 it is 4.
```

</aside>

<aside>
ðŸ’¡ **Question 3**

Implement a StackÂ using two queuesÂ **q1**Â andÂ **q2**.

**Example 1:**

```
Input:
push(2)
push(3)
pop()
push(4)
pop()
Output:3 4
Explanation:
push(2)Â the stackÂ will be {2}
push(3)Â the stackÂ will be {2 3}
pop()   poped element will be 3Â the
Â        stackÂ will be {2}
push(4)Â the stackÂ will be {2 4}
pop() Â  poped element will be 4

```

**Example 2:**

```
Input:
push(2)
pop()
pop()
push(3)
Output:2 -1
```

</aside>

<aside>
ðŸ’¡ **Question 4**

You are given a stackÂ **St**. You have to reverse the stack using recursion.

**Example 1:**

```
Input:St = {3,2,1,7,6}
Output:{6,7,1,2,3}
```

**Example 2:**

```
Input:St = {4,3,9,6}
Output:{6,9,3,4}
```

</aside>

<aside>
ðŸ’¡ **Question 5**

You are given a stringÂ **S**, the task is to reverse the string using stack.

**Example 1:**

```
Input: S="GeeksforGeeks"
Output: skeeGrofskeeG
```

</aside>

<aside>
ðŸ’¡ **Question 6**

Given stringÂ **S**Â representing aÂ postfix expression, the task is to evaluate the expression and find the final value. Operators will only include the basic arithmetic operators likeÂ ***, /, + and -**.

**Example 1:**

```
Input: S = "231*+9-"
Output: -4
Explanation:
After solving the given expression,
we have -4 as result.

```

**Example 2:**

```
Input: S = "123+*8-"
Output: -3
Explanation:
After solving the given postfix
expression, we have -3 as result.
```

</aside>

<aside>
ðŸ’¡ **Question 7**

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement theÂ `MinStack`Â class:

- `MinStack()`Â initializes the stack object.
- `void push(int val)`Â pushes the elementÂ `val`Â onto the stack.
- `void pop()`Â removes the element on the top of the stack.
- `int top()`Â gets the top element of the stack.
- `int getMin()`Â retrieves the minimum element in the stack.

You must implement a solution withÂ `O(1)`Â time complexity for each function.

**Example 1:**

</aside>

----Assignment 15 Answers-----

ðŸ’¡ Question 1

To find the next greater element for each element in an array, we can use a stack to keep track of the elements in decreasing order. We iterate through the array and for each element, we compare it with the top of the stack. If the current element is greater than the top of the stack, it is the next greater element for that element. We continue popping elements from the stack until we find an element greater than the current element or the stack becomes empty. Finally, if there are elements remaining in the stack, they don't have a next greater element and their next greater element is -1.

Here's the solution:


def nextGreaterElement(arr):
    n = len(arr)
    stack = []
    result = [-1] * n
    for i in range(n):
        while stack and arr[i] > arr[stack[-1]]:
            idx = stack.pop()
            result[idx] = arr[i]
        stack.append(i)
    return result
Example usage:


arr = [1, 3, 2, 4]
result = nextGreaterElement(arr)
print(result)  # Output: [3, 4, 4, -1]
ðŸ’¡ Question 2

To find the nearest smaller number on the left side for each element in an array, we can use a stack to keep track of the elements in increasing order. We iterate through the array from left to right and for each element, we compare it with the top of the stack. If the current element is smaller than the top of the stack, it is the nearest smaller number for that element. We continue popping elements from the stack until we find an element smaller than the current element or the stack becomes empty. Finally, if there are elements remaining in the stack, they don't have a smaller number on the left side and their nearest smaller number is -1.

Here's the solution:


def nearestSmallerElement(arr):
    n = len(arr)
    stack = []
    result = [-1] * n
    for i in range(n):
        while stack and arr[i] < arr[stack[-1]]:
            idx = stack.pop()
            result[idx] = arr[i]
        stack.append(i)
    return result
Example usage:


arr = [1, 6, 2]
result = nearestSmallerElement(arr)
print(result)  # Output: [-1, 1, 1]
ðŸ’¡ Question 3

To implement a stack using two queues, we can use one queue for the main storage of elements and another queue for temporary storage during push operations. The main operations of the stack (push, pop, top) can be implemented using these two queues.

Here's the solution:


from collections import deque

class Stack:
    def __init__(self):
        self.q1 = deque()
        self.q2 = deque()
    
    def push(self, x):
        self.q2.append(x)
        while self.q1:
            self.q2.append(self.q1.popleft())
        self.q1, self.q2 = self.q2, self.q1
    
    def pop(self):
        if not self.q1:
            return -1
        return self.q1.popleft()
    
    def top(self):
        if not self.q1:
            return -1
        return self.q1[0]

Example usage:


stack = Stack()
stack.push(2)
stack.push(3)
print(stack.pop())  # Output: 3
stack.push(4)
print(stack.pop())  # Output: 4
ðŸ’¡ Question 4

To reverse a stack using recursion, we can use the concept of recursion stack. The idea is to remove the top element of the stack and recursively reverse the remaining stack. Then, insert the top element at the bottom of the reversed stack.

Here's the solution:


def insertAtBottom(stack, x):
    if not stack:
        stack.append(x)
    else:
        temp = stack.pop()
        insertAtBottom(stack, x)
        stack.append(temp)

def reverseStack(stack):
    if stack:
        temp = stack.pop()
        reverseStack(stack)
        insertAtBottom(stack, temp)
Example usage:

stack = [3, 2, 1, 7, 6]
reverseStack(stack)
print(stack)  # Output: [6, 7, 1, 2, 3]
ðŸ’¡ Question 5

To reverse a string using a stack, we can iterate through the characters of the string and push each character onto the stack. Then, pop the characters from the stack and concatenate them to form the reversed string.

Here's the solution:


def reverseString(s):
    stack = []
    for char in s:
        stack.append(char)
    reversed_str = ""
    while stack:
        reversed_str += stack.pop()
    return reversed_str
Example usage:


s = "GeeksforGeeks"
reversed_str = reverseString(s)
print(reversed_str)  # Output: skeeGrofskeeG
ðŸ’¡ Question 6

To evaluate a postfix expression, we can use a stack to keep track of the operands. We iterate through the characters of the expression and perform the corresponding operation when we encounter an operator. The operands are retrieved from the stack, the operation is performed, and the result is pushed back onto the stack. Finally, the top of the stack will contain the final value of the expression.

Here's the solution:


def evaluatePostfixExpression(expression):
    stack = []
    operators = {"+", "-", "*", "/"}
    for char in expression:
        if char.isdigit():
            stack.append(int(char))
        elif char in operators:
            operand2 = stack.pop()
            operand1 = stack.pop()
            if char == "+":
                result = operand1 + operand2
            elif char == "-":
                result = operand1 - operand2
            elif char == "*":
                result = operand1 * operand2
            elif char == "/":
                result = operand1 // operand2  # Integer division
            stack.append(result)
    return stack.pop()
Example usage:


expression = "231*+9-"
result = evaluatePostfixExpression(expression)
print(result)  # Output: -4
ðŸ’¡ Question 7

To design a stack that supports push, pop, top, and retrieving the minimum element in constant time, we can use an additional stack to keep track of the minimum elements. The main stack contains the elements and the auxiliary stack contains the minimum elements at each position of the main stack.

Here's the solution:


class MinStack:
    def __init__(self):
        self.stack = []
        self.min_stack = []
    
    def push(self, val):
        self.stack.append(val)
        if not self.min_stack or val <= self.min_stack[-1]:
            self.min_stack.append(val)
    
    def pop(self):
        if self.stack:
            val = self.stack.pop()
            if val == self.min_stack[-1]:
                self.min_stack.pop()
    
    def top(self):
        if self.stack:
            return self.stack[-1]
    
    def getMin(self):
        if self.min_stack:
            return self.min_stack[-1]
Example usage:

minStack = MinStack()
minStack.push(2)
minStack.push(3)
print(minStack.pop())
print(minStack.top())
print(minStack.getMin())