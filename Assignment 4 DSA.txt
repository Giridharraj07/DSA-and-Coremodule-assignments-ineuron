# Assignment Questions 4

<aside>
ðŸ’¡ **Question 1**
Given three integer arrays arr1, arr2 and arr3 **sorted** in **strictly increasing** order, return a sorted array of **only** the integers that appeared in **all** three arrays.

**Example 1:**

Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]

Output: [1,5]

**Explanation:** Only 1 and 5 appeared in the three arrays.

</aside>

<aside>
ðŸ’¡ **Question 2**

Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*

- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.

**Note** that the integers in the lists may be returned in **any** order.

**Example 1:**

**Input:** nums1 = [1,2,3], nums2 = [2,4,6]

**Output:** [[1,3],[4,6]]

**Explanation:**

For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].

For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].

</aside>

<aside>
ðŸ’¡ **Question 3**
Given a 2D integer array matrix, return *the **transpose** of* matrix.

The **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.

**Example 1:**

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]

Output: [[1,4,7],[2,5,8],[3,6,9]]

![iamge_v3.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a54805f4-c9b5-491c-a900-8e8a94062c79/iamge_v3.png)

</aside>

<aside>
ðŸ’¡ **Question 4**
Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is **maximized**. Return *the maximized sum*.

**Example 1:**

Input: nums = [1,4,3,2]

Output: 4

**Explanation:** All possible pairings (ignoring the ordering of elements) are:

1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3

2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3

3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4

So the maximum possible sum is 4.

</aside>

<aside>
ðŸ’¡ **Question 5**
You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.

Given the integer n, return *the number of **complete rows** of the staircase you will build*.

**Example 1:**

[]()

![v2.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4bd91cfa-d2b1-47b3-8197-a72e8dcfff4b/v2.jpg)

**Input:** n = 5

**Output:** 2

**Explanation:** Because the 3rd row is incomplete, we return 2.

</aside>

<aside>
ðŸ’¡ **Question 6**
Given an integer array nums sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.

**Example 1:**

Input: nums = [-4,-1,0,3,10]

Output: [0,1,9,16,100]

**Explanation:** After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100]

</aside>

<aside>
ðŸ’¡ **Question 7**
You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.

Count and return *the number of maximum integers in the matrix after performing all the operations*

**Example 1:**

![q4.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4d0890d0-7bc7-4f59-be8e-352d9f3c1c52/q4.jpg)

**Input:** m = 3, n = 3, ops = [[2,2],[3,3]]

**Output:** 4

**Explanation:** The maximum integer in M is 2, and there are four of it in M. So return 4.

</aside>

<aside>
ðŸ’¡ **Question 8**

Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

*Return the array in the form* [x1,y1,x2,y2,...,xn,yn].

**Example 1:**

**Input:** nums = [2,5,1,3,4,7], n = 3

**Output:** [2,3,5,4,1,7]

**Explanation:** Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].

</aside>

----Assgnment 4 Answers------
Question 1: Given three integer arrays arr1, arr2, and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.


def arraysIntersection(arr1, arr2, arr3):
    i = j = k = 0
    result = []
    while i < len(arr1) and j < len(arr2) and k < len(arr3):
        if arr1[i] == arr2[j] == arr3[k]:
            result.append(arr1[i])
            i += 1
            j += 1
            k += 1
        elif arr1[i] < arr2[j]:
            i += 1
        elif arr2[j] < arr3[k]:
            j += 1
        else:
            k += 1
    return result
Explanation:

We use three pointers, i, j, and k, to iterate through the three arrays simultaneously.
We compare the current elements at indices i, j, and k of the three arrays.
If all three elements are equal, it means the number appeared in all three arrays, so we add it to the result list and increment all three pointers.
If the current element in arr1 is less than the current element in arr2, we increment i to move to the next element in arr1.
If the current element in arr2 is less than the current element in arr3, we increment j to move to the next element in arr2.
Otherwise, we increment k to move to the next element in arr3.
We continue this process until we reach the end of any of the arrays.
Finally, we return the result list.
Example
arr1 = [1, 2, 3, 4, 5]
arr2 = [1, 2, 5, 7, 9]
arr3 = [1, 3, 4, 5, 8]
print(arraysIntersection(arr1, arr2, arr3))
Output: [1, 5]

Question 2: Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:

answer[0] is a list of all distinct integers in nums1 which are not present in nums2.
answer[1] is a list of all distinct integers in nums2 which are not present in nums1.
Note: The integers in the lists may be returned in any order.


def findDisappearedNumbers(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    return [list(set1 - set2), list(set2 - set1)]
Explanation:

We convert nums1 and nums2 into sets to remove duplicate elements.
We find the set difference between set1 and set2 to obtain the elements in nums1 that are not present in nums2.
Similarly, we find the set difference between set2 and set1 to obtain the elements in nums2 that are not present in nums1.
Finally, we convert the resulting sets back to lists and return them as answer.
Example:

nums1 = [1, 2, 3]
nums2 = [2, 4, 6]
print(findDisappearedNumbers(nums1, nums2))
Output: [[1, 3], [4, 6]]

Question 3: Given a 2D integer array matrix, return the transpose of matrix.


def transpose(matrix):
    return [[matrix[i][j] for i in range(len(matrix))] for j in range(len(matrix[0]))]
Explanation:

We use a list comprehension to create a new matrix where the rows and columns of the original matrix are swapped.
The outer list comprehension iterates over the columns of the original matrix.
The inner list comprehension iterates over the rows of the original matrix and selects the corresponding element.
Finally, we return the transposed matrix.
Example:


matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(transpose(matrix))
Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

Question 4: Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.


def arrayPairSum(nums):
    nums.sort()
    return sum(nums[::2])
Explanation:

We first sort the array nums in ascending order.
To maximize the sum of the minimum elements in each pair, we pair the smallest elements together, the second smallest elements together, and so on.
By sorting the array, the smaller elements will appear earlier in the sorted order, and we can simply sum every alternate element starting from the first element to obtain the maximum sum.
We use slicing with a step size of 2 ([::2]) to select every alternate element in the sorted array.
Finally, we return the sum of the selected elements.
Example:


nums = [1, 4, 3, 2]
print(arrayPairSum(nums))
Output: 4

Question 5: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete. Given the integer n, return the number of complete rows of the staircase you will build.
def arrangeCoins(n):
    left = 0
    right = n
    while left <= right:
        mid = left + (right - left) // 2
        current = mid * (mid + 1) // 2
        if current == n:
            return mid
        elif current < n:
            left = mid + 1
        else:
            right = mid - 1
    return right
Explanation:

We can observe that the number of coins required to build a staircase with k rows is given by the formula k * (k + 1) // 2.
We perform a binary search to find the maximum number of complete rows we can build using the given number of coins.
We maintain two pointers, left and right, representing the range of possible values for the number of complete rows.
In each iteration, we calculate the number of coins required for the middle value (mid) and compare it with the given number of coins (n).
If the number of coins required is equal to n, it means we have found the exact number of complete rows, so we return mid.
If the number of coins required is less than n, we update left to mid + 1 to search in the right half of the range.
If the number of coins required is greater than n, we update right to mid - 1 to search in the left half of the range.
If the search range is exhausted and we have not found the exact number of complete rows, it means we return the maximum number of complete rows that can be built, which is right.
Example:


n = 5
print(arrangeCoins(n))
Output: 2

Question 6: Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.


def sortedSquares(nums):
    return sorted([num * num for num in nums])
Explanation:

We use a list comprehension to create a new list of the squares of each number in nums.
We then use the sorted() function to sort the resulting list in non-decreasing order.
Finally, we return the sorted list.
Example:


nums = [-4, -1, 0, 3, 10]
print(sortedSquares(nums))
Output: [0, 1, 9, 16, 100]

Question 7: You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi. Count and return the number of maximum integers in the matrix after performing all the operations.

def maxCount(m, n, ops):
    if not ops:
        return m * n
    min_a = min(op[0] for op in ops)
    min_b = min(op[1] for op in ops)
    return min_a * min_b
Explanation:

If the ops list is empty, it means no operations are performed, and the matrix remains all zeros. In this case, the maximum count of integers is m * n.
Otherwise, we find the minimum ai and bi values from the ops list, which represent the dimensions of the submatrix that should be incremented.
The maximum count of integers will be equal to the product of the minimum ai and bi values, as all elements within this submatrix will have the maximum value.
Finally, we return the maximum count of integers.
Example:

m = 3
n = 3
ops = [[2, 2], [3, 3]]
print(maxCount(m, n, ops))
Output: 4

Question 8: Given the array nums consisting of 2n elements in the form [x1, x2, ..., xn, y1, y2, ..., yn], return the array in the form [x1, y1, x2, y2, ..., xn, yn].


def shuffle(nums, n):
    result = []
    for i in range(n):
        result.append(nums[i])
        result.append(nums[i + n])
    return result
Explanation:

We iterate from i = 0 to i = n-1 and append nums[i] followed by nums[i + n] to the result list.
By doing so, we interleave the elements from the first half of nums with the elements from the second half.
Finally, we return the result list.
Example:


nums = [2, 5, 1, 3, 4, 7]
n = 3
print(shuffle(nums, n))
Output: [2, 3, 5, 4, 1, 7]